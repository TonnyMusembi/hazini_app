{"version":3,"file":"update-role-bbafe1fb.js","sources":["../../../../stores/update-role.ts"],"sourcesContent":["import { UpdateRoleParams } from \"~/server/src/role\";\n\nexport interface UpdateError {\n  hasError: boolean;\n  message: string;\n  field: string;\n}\nexport interface UpdateState {\n  pending: boolean;\n  error: UpdateError;\n  responseOK: boolean;\n}\nexport const useUpdateRoleStore = defineStore(\"update-role-store\", {\n  state: (): UpdateState => ({\n    pending: false,\n    error: {\n      hasError: false,\n      message: \"\",\n      field: \"\",\n    },\n    responseOK: false,\n  }),\n\n  actions: {\n    async updateRole(\n      body: UpdateRoleParams,\n      accessToken: string,\n      roleID: number\n    ) {\n      try {\n        this.pending = true;\n        let error = {\n          hasError: false,\n          message: \"\",\n          field: \"\",\n        };\n        this.error = error;\n        let responseOK = false;\n        this.responseOK = responseOK;\n\n        const { data } = await useFetch(\"/api/roles/update\", {\n          method: \"put\",\n          body: { body, accessToken, roleID },\n\n          async onResponse({ request, response, options }) {\n            // Process the response data\n            if (response.ok) {\n              responseOK = true;\n            }\n          },\n\n          async onResponseError({ request, response, options }) {\n            if (response.status == 400) {\n              error = {\n                hasError: true,\n                message: \"permission or name not provided\",\n                field: \"none\",\n              };\n            }\n            if (response.status == 401) {\n              error = {\n                hasError: true,\n                message: \"you are not authorised to perform that action\",\n                field: \"none\",\n              };\n            }\n            if (response.status === 403) {\n              error = {\n                hasError: true,\n                message: \"Role or permission name already exists\",\n                field: \"name\",\n              };\n            }\n            if (response.status === 500) {\n              error = {\n                hasError: true,\n                message: \"Internal server error\",\n                field: \"none\",\n              };\n            }\n          },\n        });\n        this.pending = false;\n        this.error = error;\n        this.responseOK = responseOK;\n      } catch (err) {\n        this.pending = false;\n      }\n    },\n    unsetError() {\n      this.error = {\n        hasError: false,\n        message: \"\",\n        field: \"\",\n      };\n    },\n  },\n});\n"],"names":[],"mappings":";;;;AAYO,MAAA,qBAAA,YAAA,qBAAA;AAAA,EAA4D,OAAA,OAAA;AAAA,IACtC,SAAA;AAAA,IAChB,OAAA;AAAA,MACF,UAAA;AAAA,MACK,SAAA;AAAA,MACD,OAAA;AAAA,IACF;AAAA,IACT,YAAA;AAAA,EACY;AAAA,EACd,SAAA;AAAA,IAES,MAAA,WAAA,MAAA,aAAA,QAAA;AAML,UAAA;AACE,aAAA,UAAA;AACA,YAAA,QAAA;AAAA,UAAY,UAAA;AAAA,UACA,SAAA;AAAA,UACD,OAAA;AAAA,QACF;AAET,aAAA,QAAA;AACA,YAAA,aAAA;AACA,aAAA,aAAA;AAEA,cAAA,EAAA,KAAA,IAAA,MAAA,SAAA,qBAAA;AAAA,UAAqD,QAAA;AAAA,UAC3C,MAAA,EAAA,MAAA,aAAA,OAAA;AAAA,UAC0B,MAAA,WAAA,EAAA,SAAA,UAAA,QAAA,GAAA;AAIhC,gBAAA,SAAA,IAAA;AACE,2BAAA;AAAA,YAAa;AAAA,UACf;AAAA,UACF,MAAA,gBAAA,EAAA,SAAA,UAAA,QAAA,GAAA;AAGE,gBAAA,SAAA,UAAA,KAAA;AACE,sBAAA;AAAA,gBAAQ,UAAA;AAAA,gBACI,SAAA;AAAA,gBACD,OAAA;AAAA,cACF;AAAA,YACT;AAEF,gBAAA,SAAA,UAAA,KAAA;AACE,sBAAA;AAAA,gBAAQ,UAAA;AAAA,gBACI,SAAA;AAAA,gBACD,OAAA;AAAA,cACF;AAAA,YACT;AAEF,gBAAA,SAAA,WAAA,KAAA;AACE,sBAAA;AAAA,gBAAQ,UAAA;AAAA,gBACI,SAAA;AAAA,gBACD,OAAA;AAAA,cACF;AAAA,YACT;AAEF,gBAAA,SAAA,WAAA,KAAA;AACE,sBAAA;AAAA,gBAAQ,UAAA;AAAA,gBACI,SAAA;AAAA,gBACD,OAAA;AAAA,cACF;AAAA,YACT;AAAA,UACF;AAAA,QACF,GAAA,aAAA;AAEF,aAAA,UAAA;AACA,aAAA,QAAA;AACA,aAAA,aAAA;AAAA,MAAkB,SAAA,KAAA;AAElB,aAAA,UAAA;AAAA,MAAe;AAAA,IACjB;AAAA,IACF,aAAA;AAEE,WAAA,QAAA;AAAA,QAAa,UAAA;AAAA,QACD,SAAA;AAAA,QACD,OAAA;AAAA,MACF;AAAA,IACT;AAAA,EACF;AAEJ,CAAA;"}