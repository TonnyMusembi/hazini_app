{"version":3,"file":"ThePermissions-c68778be.js","sources":["../../../../components/ThePermissions.vue"],"sourcesContent":["<script setup lang=\"ts\">\nimport { roleHasPermission } from \"~/utils/permissions\";\nimport { TogglePermission } from \"~/server/src/permission\";\nimport { useAuthStore } from \"../stores/login\";\nimport { useRoleStore } from \"../stores/roles\";\nimport { usePermissionStore } from \"../stores/permissions\";\n\nimport { storeToRefs } from \"pinia\";\n\nconst { user } = storeToRefs(useAuthStore());\n\nconst { selectedRole } = storeToRefs(useRoleStore());\nconst { togglePermissionsArray, hasPermission } = storeToRefs(\n  usePermissionStore()\n);\nconst {\n  setTogglePermissionsArray,\n  togglePermission: invertPermission,\n  setTogglePermissionPayload,\n} = usePermissionStore();\n\nconst pageSize = ref(10);\nconst pageID = ref(1);\nconst {\n  data: resources,\n  pending,\n  error,\n  refresh,\n} = await useFetch(\"/api/resources/list\", {\n  query: {\n    accessToken: user.value.refresh_token,\n  },\n});\nrefresh();\n\nconst isChecked = (index1: number, index2: number) => {\n  const index = parseInt(`${index1}${index2}`);\n  return hasPermission.value(index);\n};\n\nconst togglePermission = (\n  index1: number,\n  index2: number,\n  permission: BigInt\n) => {\n  let index = parseInt(`${index1}${index2}`);\n  if (!togglePermissionsArray.value.length && resources.value.length) {\n    setTogglePermissionsArray(resources.value);\n  }\n\n  const checkPermission = !hasPermission.value(index, permission);\n  const payload: TogglePermission = {\n    index,\n    permissionIsChecked: checkPermission,\n    permission,\n  };\n\n  const togglePermissionsPayload: TogglePermission = {\n    index,\n    permissionIsChecked: checkPermission,\n    permission,\n  };\n\n  setTogglePermissionPayload(togglePermissionsPayload);\n\n  invertPermission();\n};\n</script>\n\n<template>\n  <div class=\"shadow-md relative pb-5\">\n    <div class=\"relative h-full overflow-auto\">\n      <div\n        class=\"flex justify-between w-full text-sm font-bold text-left text-gray-500 px-6 py-3 tracking-wide\"\n      >\n        <div class=\"\">Action</div>\n        <div class=\"\">Allowed</div>\n      </div>\n      <div\n        v-for=\"(resourceGroup, index1) in resources\"\n        :key=\"resourceGroup.resource_group_id\"\n        class=\"w-full text-sm text-left text-gray-500 cursor-pointer\"\n      >\n        <div class=\"text-xs text-gray-800\">\n          <div>\n            <div\n              colspan=\"2\"\n              scope=\"col\"\n              class=\"px-6 py-3 text-gray-900 font-semibold\"\n            >\n              {{ resourceGroup.resource_group_name }}\n            </div>\n          </div>\n        </div>\n        <div class=\"bg-white py-3\">\n          <div\n            v-for=\"(resource, index2) in resourceGroup.resources\"\n            :key=\"`${index1}${index2}`\"\n            class=\"flex justify-between w-full hover:bg-teal-100\"\n          >\n            <div class=\"px-6 font-medium whitespace-nowrap\">\n              {{ resource.resource_name }}\n            </div>\n            <div class=\"px-6\">\n              <label class=\"relative inline-flex items-center cursor-pointer\">\n                <input\n                  @change=\"\n                    togglePermission(index1, index2, resource.permission)\n                  \"\n                  type=\"checkbox\"\n                  value=\"\"\n                  class=\"sr-only peer\"\n                  :checked=\"isChecked(index1, index2, resource.permission)\"\n                />\n                <div\n                  class=\"w-9 h-4 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-teal-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-4 after:w-4 after:transition-all peer-checked:bg-teal-600\"\n                ></div>\n                <span\n                  v-if=\"isChecked(index1, index2, resource.permission)\"\n                  class=\"ml-3 text-sm font-medium text-gray-900\"\n                  >Yes</span\n                >\n                <span v-else class=\"ml-3 text-sm font-medium text-gray-900\"\n                  >No</span\n                >\n              </label>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n    <AddResourcesDialog :refreshPermission=\"refresh\" />\n  </div>\n</template>\n"],"names":["_withAsyncContext"],"mappings":";;;;;;;;;;;AASA,UAAA,EAAA,KAAA,IAAA,YAAA,aAAA,CAAA;AAEA,gBAAA,aAAA,CAAA;AACA,UAAA,EAAA,wBAAA,cAAA,IAAA;AAAA,MAAkD,mBAAA;AAAA,IAC7B;AAKnB,uBAAA;AAGF,QAAA,EAAA;AACA,QAAA,CAAA;AACA,UAAA;AAAA,MAAM,MAAA;AAAA,MACE;AAAA,MACN;AAAA,MACA;AAAA,IACA,KAAA,CAAA,QAAA,SAAA,IAAAA,iBAAA,MAAA,SAAA,uBAAA;AAAA,MACwC,OAAA;AAAA,QACjC,aAAA,KAAA,MAAA;AAAA,MACmB;AAAA,IAC1B,GAAA,aAAA,CAAA,GAAA,SAAA,MAAA,QAAA,UAAA,GAAA;AAEF;AAEA,UAAA,YAAA,CAAA,QAAA,WAAA;AACE,YAAA,QAAA,SAAA,GAAA,SAAA,QAAA;AACA,aAAA,cAAA,MAAA,KAAA;AAAA,IAAgC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}