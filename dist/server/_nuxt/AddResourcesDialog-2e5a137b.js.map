{"version":3,"file":"AddResourcesDialog-2e5a137b.js","sources":["../../../../stores/roles.ts","../../../../utils/permissions.ts","../../../../stores/permissions.ts","../../../../stores/resource-group.ts","../../../../components/AddResourceGroup.vue","../../../../stores/resources.ts","../../../../components/AddResource.vue","../../../../components/AddResourcesDialog.vue"],"sourcesContent":["import { Role } from \"~~/server/src/role\";\n\nexport interface RoleState {\n  selectedRole: Role | null;\n  editIsToActivateRole: boolean;\n  refreshRolesFunction: Function;\n}\n\nexport const useRoleStore = defineStore(\"roles-store\", {\n  state: (): RoleState => ({\n    selectedRole: null,\n    editIsToActivateRole: false,\n    refreshRolesFunction: () => void 0,\n  }),\n\n  actions: {\n    setSelectedRole(role: Role) {\n      this.selectedRole = role;\n    },\n    setEditRoleIntention(editIsToActivate: boolean) {\n      this.editIsToActivateRole = editIsToActivate;\n    },\n    setRefreshRolesFunction(refresh: Function) {\n      this.refreshRolesFunction = refresh;\n    },\n  },\n  persist: true,\n});\n","import { Role } from \"~~/server/src/role\";\n\nimport bigInt from \"big-integer\";\n\nexport function calculatePermission(permissions: []): string {\n  return permissions.reduce(\n    (acc, permission) => bigInt(acc).or(permission).toString(),\n    bigInt(0)\n  );\n}\n\nexport function roleHasPermission(\n  selectedRole: Role,\n  permission: number\n): boolean {\n  if (selectedRole == null) {\n    return false;\n  }\n\n  \n\n  return (selectedRole.permission & permission) === permission;\n}\n","import { TogglePermission } from \"~/server/src/permission\";\nimport { Role } from \"~~/server/src/role\";\nimport { calculatePermission } from \"~~/utils/permissions\";\n\nexport interface PermissionsState {\n  togglePermissionsArray: TogglePermission[] | [];\n  computedPermission: BigInt | null;\n  selectedPermission: BigInt | null;\n  togglePermissionPayload: TogglePermission | null;\n}\nexport const usePermissionStore = defineStore(\"permissions-store\", {\n  state: (): PermissionsState => ({\n    togglePermissionsArray: [],\n    computedPermission: null,\n    selectedPermission: null,\n    togglePermissionPayload: null,\n  }),\n\n  getters: {\n    hasPermission: (state) => {\n      return (index: number) => {\n        if (state.togglePermissionsArray.length) {\n          const found = state.togglePermissionsArray.find(\n            (element) => element.index === index\n          );\n          if (found != undefined) {\n            return found.permissionIsChecked;\n          }\n        }\n        return false;\n      };\n    },\n  },\n\n  actions: {\n    setTogglePermissionsArray(payload: []) {\n      if (payload.length > 0) {\n        let togglePermissionsArray: TogglePermission[] = [];\n        payload.forEach((resourceGroup, index1) => {\n          resourceGroup.resources.forEach((resource, index2: number) => {\n            togglePermissionsArray.push({\n              index: parseInt(`${index1}${index2}`),\n              permissionIsChecked: false,\n              permission: resource.permission,\n            });\n          });\n        });\n        this.togglePermissionsArray = togglePermissionsArray;\n      }\n    },\n\n    unsetTogglePermissionsArray() {\n      this.togglePermissionsArray = [];\n    },\n\n    togglePermission() {\n      let permissionIsChecked = this.togglePermissionsArray;\n      if (permissionIsChecked.length && this.togglePermissionPayload != null) {\n        const found = permissionIsChecked.findIndex(\n          (element) => element.index === this.togglePermissionPayload?.index\n        );\n        permissionIsChecked[found] = this.togglePermissionPayload;\n      }\n      this.togglePermissionsArray = permissionIsChecked;\n      this.computePermission();\n      console.log(this.computedPermission);\n    },\n\n    computePermission() {\n      const filteredPermissions = this.togglePermissionsArray.filter(\n        (permission) => {\n          return permission.permissionIsChecked;\n        }\n      );\n\n      const permissionsOnly = filteredPermissions.map((permission) => {\n        return \"\" + permission.permission;\n      });\n\n      console.log(permissionsOnly);\n\n      this.computedPermission = calculatePermission(permissionsOnly);\n    },\n    setSelectedPermission(permission: number) {\n      this.selectedPermission = permission;\n    },\n\n    setTogglePermissionPayload(payload: TogglePermission) {\n      this.togglePermissionPayload = payload;\n    },\n    unsetTogglePermissionPayload(payload: TogglePermission) {\n      this.togglePermissionPayload = null;\n    },\n\n    initializeTogglePermissionsArrayWithSomeItemsChecked(\n      payload: [],\n      selectedRole: Role\n    ) {\n      if (payload.length > 0) {\n        let togglePermissionsArray: TogglePermission[] = [];\n        payload.forEach((resourceGroup, index1) => {\n          resourceGroup.resources.forEach((resource, index2: number) => {\n            togglePermissionsArray.push({\n              index: parseInt(`${index1}${index2}`),\n              permissionIsChecked: roleHasPermission(\n                selectedRole,\n                resource.permission\n              ),\n              permission: resource.permission,\n            });\n          });\n        });\n        this.togglePermissionsArray = togglePermissionsArray;\n      }\n    },\n  },\n});\n","import { CreateResourceGroupParams } from \"~/server/src/resource-group\";\n\nexport interface CreateResourceGroupError {\n  hasError: boolean;\n  message: string;\n  field: string;\n}\nexport interface CreateResourceGroupState {\n  pending: boolean;\n  error: CreateResourceGroupError;\n  responseOK: boolean;\n}\nexport const useCreateResourceGroupStore = defineStore(\n  \"create-resource-group-store\",\n  {\n    state: (): CreateResourceGroupState => ({\n      pending: false,\n      error: {\n        hasError: false,\n        message: \"\",\n        field: \"\",\n      },\n      responseOK: false,\n    }),\n\n    actions: {\n      async createResourceGroup(\n        body: CreateResourceGroupParams,\n        accessToken: string\n      ) {\n        try {\n          this.pending = true;\n          let error = {\n            hasError: false,\n            message: \"\",\n            field: \"\",\n          };\n          this.error = error;\n          let responseOK = false;\n          this.responseOK = responseOK;\n\n          const { data } = await useFetch(\"/api/resource-group/create\", {\n            method: \"post\",\n            body: { body, accessToken },\n\n            async onResponse({ request, response, options }) {\n              // Process the response data\n              if (response.ok) {\n                responseOK = true;\n              }\n            },\n\n            async onResponseError({ request, response, options }) {\n              if (response.status == 400) {\n                error = {\n                  hasError: true,\n                  message: \"Invalid name\",\n                  field: \"name\",\n                };\n              }\n              if (response.status === 403) {\n                error = {\n                  hasError: true,\n                  message: \"Name already exists\",\n                  field: \"name\",\n                };\n              }\n              if (response.status === 500) {\n                error = {\n                  hasError: true,\n                  message: \"Internal server error\",\n                  field: \"none\",\n                };\n              }\n            },\n          });\n          this.pending = false;\n          this.error = error;\n          this.responseOK = responseOK;\n        } catch (err) {\n          this.pending = false;\n        }\n      },\n    },\n  }\n);\n","<script setup lang=\"ts\">\nimport { CreateResourceGroupParams } from \"~~/server/src/resource-group\";\n\nconst { createResourceGroup } = useCreateResourceGroupStore();\nconst { user } = storeToRefs(useAuthStore());\nconst { responseOK, pending: createResourceGroupIsPending } = storeToRefs(\n  useCreateResourceGroupStore()\n);\n\nconst props = defineProps({\n  refreshPermission: {\n    type: Function,\n    required: true,\n  },\n});\n\nconst resourceGroupName = ref(\"\");\nconst addResourceGroup = async () => {\n  const token = user.value.refresh_token;\n  const resourceGroup: CreateResourceGroupParams = {\n    name: resourceGroupName.value,\n  };\n  await createResourceGroup(resourceGroup, token);\n  if (responseOK.value) {\n    props.refreshPermission();\n  }\n};\n</script>\n<template>\n  <form class=\"p-4\" @submit.prevent=\"addResourceGroup\">\n    <div class=\"w-full\">\n      <label for=\"resourceGroupName\" class=\"text-sm text-gray-600\"\n        >Resource Group Name</label\n      >\n      <input\n        id=\"resourceGroupName\"\n        name=\"resourceGroupName\"\n        type=\"resourceGroupName\"\n        required\n        v-model=\"resourceGroupName\"\n        class=\"w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-transparent focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 transition-colors duration-200 ease-in-out\"\n      />\n    </div>\n\n    <button\n      type=\"submit\"\n      class=\"flex px-4 w-full mt-10 bg-teal-700 py-2 text-slate-50 uppercase tracking-wider rounded-md items-center justify-center\"\n    >\n      <Spin v-if=\"createResourceGroupIsPending\" class=\"block text-slate-50\" />\n\n      <span v-else>Add Resource Group </span>\n    </button>\n  </form>\n</template>\n","import { CreateResourceParams } from \"~/server/src/resources\";\n\nexport interface CreateResourceError {\n  hasError: boolean;\n  message: string;\n  field: string;\n}\nexport interface CreateResourceState {\n  pending: boolean;\n  error: CreateResourceError;\n  responseOK: boolean;\n}\nexport const useCreateResourceStore = defineStore(\"create-resource-store\", {\n  state: (): CreateResourceState => ({\n    pending: false,\n    error: {\n      hasError: false,\n      message: \"\",\n      field: \"\",\n    },\n    responseOK: false,\n  }),\n\n  actions: {\n    async createResource(body: CreateResourceParams, accessToken: string) {\n      try {\n        this.pending = true;\n        let error = {\n          hasError: false,\n          message: \"\",\n          field: \"\",\n        };\n        this.error = error;\n        let responseOK = false;\n        this.responseOK = responseOK;\n\n        const { data } = await useFetch(\"/api/resources/create\", {\n          method: \"post\",\n          body: { body, accessToken },\n\n          async onResponse({ request, response, options }) {\n            // Process the response data\n            if (response.ok) {\n              responseOK = true;\n            }\n          },\n\n          async onResponseError({ request, response, options }) {\n            if (response.status == 400) {\n              error = {\n                hasError: true,\n                message: \"Invalid name\",\n                field: \"name\",\n              };\n            }\n            if (response.status === 403) {\n              error = {\n                hasError: true,\n                message: \"Name already exists\",\n                field: \"name\",\n              };\n            }\n            if (response.status === 500) {\n              error = {\n                hasError: true,\n                message: \"Internal server error\",\n                field: \"none\",\n              };\n            }\n           \n          },\n        });\n        this.pending = false;\n        this.error = error;\n        this.responseOK = responseOK;\n        \n      } catch (err) {\n        this.pending = false;\n      }\n    },\n  },\n});\n\n","<script setup lang=\"ts\">\nimport { CreateResourceParams } from \"~~/server/src/resources\";\n\nconst { createResource } = useCreateResourceStore();\nconst { user } = storeToRefs(useAuthStore());\nconst { responseOK, pending: createResourceIsPending } = storeToRefs(\n  useCreateResourceStore()\n);\n\nconst props = defineProps({\n  refreshPermission: {\n    type: Function,\n    required: true,\n  },\n});\n\n//fetch resource groups\nconst pageSize = ref(10);\nconst pageID = ref(1);\nconst {\n  data: resourceGroups,\n  pending,\n  error,\n  refresh: refreshResourceGroups,\n} = await useFetch(\"/api/resource-group/list\", {\n  query: {\n    pageSize: pageSize.value,\n    pageID: pageID.value,\n    accessToken: user.value.refresh_token,\n  },\n});\nrefreshResourceGroups();\n\nconst resourceName = ref(\"\");\nconst resourceGroupID = ref();\nconst permission = ref();\nconst status = ref();\nconst addResource = async () => {\n  const token = user.value.refresh_token;\n  const resource: CreateResourceParams = {\n    name: resourceName.value,\n    resource_group_id: parseInt(resourceGroupID.value),\n    permission: parseInt(permission.value),\n    status: parseInt(status.value),\n  };\n  await createResource(resource, token);\n  if (responseOK.value) {\n    props.refreshPermission();\n  }\n};\n</script>\n<template>\n  <form class=\"p-4\" @submit.prevent=\"addResource\">\n    <div class=\"mb-3\">\n      <label\n        for=\"name\"\n        class=\"block text-sm font-semibold leading-6 text-gray-900\"\n        >Select Resource Group</label\n      ><select\n        v-model=\"resourceGroupID\"\n        class=\"block appearance-none w-full bg-gray-200 border border-gray-200 text-gray-700 py-3 px-4 pr-8 rounded leading-tight focus:outline-none focus:bg-white focus:border-gray-500\"\n      >\n        <option\n          v-for=\"resourceGroup in resourceGroups\"\n          :value=\"resourceGroup.id\"\n          :key=\"resourceGroup.id\"\n        >\n          {{ resourceGroup.name }}\n        </option>\n      </select>\n    </div>\n    <div class=\"w-full mb-3\">\n      <label for=\"resourceName\" class=\"text-sm text-gray-600\"\n        >Resource Name</label\n      >\n      <input\n        id=\"resourceName\"\n        name=\"resourceName\"\n        type=\"resourceName\"\n        required\n        v-model=\"resourceName\"\n        class=\"w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-transparent focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 transition-colors duration-200 ease-in-out\"\n      />\n    </div>\n    <div class=\"w-full mb-3\">\n      <label for=\"permission\" class=\"text-sm text-gray-600\">Permission</label>\n      <input\n        id=\"permission\"\n        name=\"permission\"\n        type=\"permission\"\n        required\n        v-model=\"permission\"\n        class=\"w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-transparent focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 transition-colors duration-200 ease-in-out\"\n      />\n    </div>\n    <div class=\"w-full mb-3\">\n      <label for=\"status\" class=\"text-sm text-gray-600\">Status</label>\n      <input\n        id=\"status\"\n        name=\"status\"\n        type=\"status\"\n        required\n        v-model=\"status\"\n        class=\"w-full bg-gray-100 bg-opacity-50 rounded border border-gray-300 focus:border-indigo-500 focus:bg-transparent focus:ring-2 focus:ring-indigo-200 text-base outline-none text-gray-700 py-1 px-3 transition-colors duration-200 ease-in-out\"\n      />\n    </div>\n\n    <button\n      type=\"submit\"\n      class=\"flex px-4 w-full mt-10 bg-teal-700 py-2 text-slate-50 uppercase tracking-wider rounded-md items-center justify-center\"\n    >\n      <Spin v-if=\"createResourceIsPending\" class=\"block text-slate-50\" />\n\n      <span v-else>Add Resource Group </span>\n    </button>\n  </form>\n</template>\n","<script setup lang=\"ts\">\nimport { TransitionRoot } from \"@headlessui/vue\";\nimport { TabGroup, TabList, Tab, TabPanels, TabPanel } from \"@headlessui/vue\";\nimport { storeToRefs } from \"pinia\";\nimport { useDialogStore } from \"../stores/dialogs\";\n\nconst props = defineProps({\n  refreshPermission: {\n    type: Function,\n    required: true,\n  },\n});\n\nconst { showAddResourcesDialog } = storeToRefs(useDialogStore());\nconst { closeAddResourcesDialog } = useDialogStore();\nconst resourceGroupName = ref(\"\");\n</script>\n<template>\n  <TransitionRoot as=\"template\" :show=\"showAddResourcesDialog\">\n    <DialogComponent :closeFunc=\"closeAddResourcesDialog\">\n      <div class=\"w-full py-10\">\n        <TabGroup>\n          <TabList class=\"flex space-x-1 rounded-xl bg-teal-900/20 mx-5\">\n            <Tab as=\"template\" v-slot=\"{ selected }\">\n              <button\n                :class=\"[\n                  'w-full rounded-lg py-2.5 text-sm font-medium leading-5 text-teal-700',\n                  'ring-white ring-opacity-60 ring-offset-2 ring-offset-teal-400 focus:outline-none focus:ring-2',\n                  selected\n                    ? 'bg-teal-100 shadow'\n                    : 'text-teal-700 hover:bg-white/[0.12] hover:teal-800',\n                ]\"\n              >\n                Add Resource Group\n              </button>\n            </Tab>\n            <Tab as=\"template\" v-slot=\"{ selected }\">\n              <button\n                :class=\"[\n                  'w-full rounded-lg py-2.5 text-sm font-medium leading-5 text-teal-700',\n                  'ring-white ring-opacity-60 ring-offset-2 ring-offset-teal-400 focus:outline-none focus:ring-2',\n                  selected\n                    ? 'bg-teal-100 shadow'\n                    : 'text-teal-700 hover:bg-white/[0.12] hover:teal-800',\n                ]\"\n              >\n                Add Resource\n              </button>\n            </Tab>\n          </TabList>\n\n          <TabPanels class=\"mt-2\">\n            <TabPanel\n              :class=\"[\n                'rounded-xl bg-white',\n                'ring-white ring-opacity-60 ring-offset-2 ring-offset-teal-400 focus:outline-none focus:ring-2',\n              ]\"\n            >\n              <AddResourceGroup :refreshPermission=\"refreshPermission\" />\n            </TabPanel>\n            <TabPanel\n              :class=\"[\n                'rounded-xl bg-white',\n                'ring-white ring-opacity-60 ring-offset-2 ring-offset-teal-400 focus:outline-none focus:ring-2',\n              ]\"\n            >\n              <AddResource :refreshPermission=\"refreshPermission\" />\n            </TabPanel>\n          </TabPanels>\n        </TabGroup>\n      </div>\n      <DialogFooter>\n        <p class=\"text-sm text-gray-600\"></p>\n      </DialogFooter>\n    </DialogComponent>\n  </TransitionRoot>\n</template>\n"],"names":["_withAsyncContext"],"mappings":"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"}